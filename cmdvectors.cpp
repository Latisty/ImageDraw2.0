#include <vector>
#include <iostream>

struct val_mappings
{
    // alpha 1 (.99)
    int nn;

    //alpha 10 (.90)
    int nt;

    //alpha 25 (.75)
    int qrt;

    //alpha 50 (.50)
    int hlf;
};

int main()
{

    std::vector<int> myVect = {0,0,0};

    std::vector<std::vector<int>> operations = 
    {
    {3,3,3,3,3,3,3,3},
    {3,3,3,3,3,3,3},
    {2,3,3,3,3,3,3},
    {3,3,3,3,3,3},
    {2,2,3,3,3,3,3},
    {2,3,3,3,3,3},
    {1,1,3,3,3,3,3},
    {3,3,3,3,3},
    {2,2,3,3,3,3},
    {1,1,2,3,3,3,3},
    {1,2,3,3,3,3},
    {2,3,3,3,3},
    {1,1,3,3,3,3},
    {2,2,2,3,3,3},
    {1,3,3,3,3},
    {3,3,3,3},
    {1,2,2,3,3,3},
    {2,2,3,3,3},
    {1,2,2,2,2,3,3},
    {1,1,2,3,3,3},
    {0,0,1,2,3,3,3},
    {1,2,3,3,3},
    {0,1,1,1,3,3,3},
    {2,3,3,3},
    {1,2,2,2,3,3},
    {1,1,3,3,3},
    {2,2,2,3,3},
    {0,0,1,3,3,3},
    {1,3,3,3},
    {2,2,2,2,2,3},
    {0,0,0,3,3,3},
    {3,3,3},
    {1,2,2,3,3},
    {2,2,2,2,2,2,2},
    {0,0,2,2,3,3},
    {2,2,3,3},
    {1,2,2,2,2,3},
    {0,0,1,1,2,3,3},
    {1,1,2,3,3},
    {2,2,2,2,3},
    {0,0,1,1,1,1,3,3},
    {0,0,1,2,3,3},
    {0,1,2,3,3},
    {1,2,3,3},
    {2,2,2,2,2,2},
    {0,1,1,1,3,3},
    {0,0,2,3,3},
    {2,3,3},
    {1,2,2,2,3},
    {0,1,1,3,3,4},
    {0,1,1,3,3},
    {1,1,3,3},
    {2,2,2,3,4},
    {2,2,2,3},
    {0,0,1,3,3,4},
    {0,0,1,3,3},
    {0,1,3,3},
    {1,3,3},
    {2,2,2,2,2,4},
    {2,2,2,2,2},
    {0,3,3,4,4},
    {0,3,3,4},
    {0,3,3},
    {3,3},
    {1,2,2,3},
    {0,0,2,2,3,4,4,4,4},
    {0,0,2,2,3,4,4,4},
    {0,0,2,2,3,4,4},
    {0,0,2,2,3,4},
    {0,0,2,2,3},
    {0,2,2,3},
    {2,2,3},
    {1,2,2,2,2,4},
    {1,2,2,2,2},
    {1,1,1,1,1,3},
    {0,0,1,1,2,3},
    {0,1,1,2,3},
    {1,1,2,3},
    {2,2,2,2,4},
    {2,2,2,2},
    {0,0,0,1,1,1,1,3},
    {0,0,1,1,1,1,3},
    {0,0,1,2,3,4},
    {0,0,1,2,3},
    {0,1,2,3},
    {1,2,3,4},
    {1,2,3},
    {0,0,0,1,1,1,3,4,4},
    {0,0,0,1,1,1,3,4},
    {0,0,0,1,1,1,3},
    {0,0,1,1,1,3},
    {0,1,1,1,3},
    {1,1,1,3},
    {0,0,2,3},
    {0,2,3},
    {2,3},
    {1,2,2,2,4},
    {1,2,2,2},
    {0,0,0,1,1,3,4},
    {0,0,0,1,1,3},
    {0,0,1,1,3},
    {0,1,1,3},
    {1,1,3,4},
    {1,1,3},
    {0,0,2,2,2},
    {2,2,2,4},
    {2,2,2},
    {0,0,0,1,3,4,4,4},
    {0,0,0,1,3,4,4},
    {0,0,0,1,3,4},
    {0,0,0,1,3},
    {0,0,1,3},
    {0,1,3,4},
    {0,1,3},
    {1,3},
    {1,1,2,2},
    {0,0,0,0,0,0,0,0,0,0,3},
    {0,0,0,0,0,0,0,0,0,3},
    {0,0,0,0,0,0,0,0,3},
    {0,0,0,0,0,0,0,3},
    {0,0,0,0,0,0,3},
    {0,0,0,0,0,3},
    {0,0,0,0,3},
    {0,0,0,3},
    {0,0,3},
    {0,3},
    {3,4},
    {3},
    {1,2,2,4},
    {1,2,2},
    {0,0,0,1,1,1,1,1,1},
    {0,0,1,1,1,1,1,1,4},
    {0,0,1,1,1,1,1,1},
    {0,1,1,1,1,1,1},
    {1,1,1,1,1,1},
    {0,0,1,1,1,2,4},
    {0,0,1,1,1,2},
    {0,1,1,1,2},
    {0,0,0,2,2},
    {0,0,2,2},
    {0,2,2,4},
    {0,2,2},
    {2,2},
    {0,0,0,0,1,1,1,1,1,4},
    {0,0,0,0,1,1,1,1,1},
    {0,0,0,1,1,1,1,1},
    {0,0,1,1,1,1,1,4},
    {0,0,1,1,1,1,1},
    {0,1,1,1,1,1},
    {1,1,1,1,1},
    {0,1,1,2,4},
    {0,0,1,1,2},
    {0,1,1,2},
    {0,0,0,1,1,1,1,4,4,4,4},
    {1,1,2},
    {0,0,0,1,1,1,1,4,4,4},
    {1,1,1,1,4,4,4,4,4},
    {0,0,0,1,1,1,1,4,4},
    {1,1,1,1,4,4,4,4},
    {0,0,0,1,1,1,1,4},
    {1,1,1,1,4,4,4},
    {0,0,0,1,1,1,1},
    {1,1,1,1,4,4},
    {0,0,1,1,1,1},
    {1,1,1,1,4},
    {0,0,1,2,4},
    {1,1,1,1},
    {0,0,1,2},
    {1,2,4,4},
    {0,1,2},
    {1,2,4},
    {0,0,0,1,1,1,4,4,4,4},
    {1,2},
    {0,0,0,1,1,1,4,4,4},
    {0,0,0,0,0,1,1,1,4},
    {0,0,0,1,1,1,4,4},
    {0,0,0,0,0,1,1,1},
    {0,0,0,1,1,1,4},
    {0,0,0,0,1,1,1},
    {0,0,0,1,1,1},
    {0,0,0,2,4,4},
    {0,0,1,1,1},
    {0,0,0,2,4},
    {0,1,1,1},
    {0,0,0,2},
    {1,1,1},
    {0,0,2},
    {0,0,0,1,1,4,4,4,4,4,4},
    {0,2},
    {0,0,0,1,1,4,4,4,4,4},
    {2},
    {0,0,0,1,1,4,4,4,4},
    {0,0,0,0,0,0,1,1,4},
    {0,0,0,1,1,4,4,4},
    {0,0,0,0,0,0,1,1},
    {0,0,0,1,1,4,4},
    {0,0,0,0,0,1,1},
    {0,0,0,1,1,4},
    {0,0,0,0,1,1},
    {0,0,0,1,1},
    {1,1,4,4,4},
    {0,0,1,1},
    {1,1,4,4},
    {0,1,1},
    {1,1,4},
    {0,0,0,1,4,4,4,4,4,4,4,4},
    {1,1},
    {0,0,0,1,4,4,4,4,4,4,4},
    {0,0,0,0,0,0,0,0,1,4,4},
    {0,0,0,1,4,4,4,4,4,4},
    {0,0,0,0,0,0,0,0,1,4},
    {0,0,0,1,4,4,4,4,4},
    {0,0,0,0,0,0,0,0,1},
    {0,0,0,1,4,4,4,4},
    {0,0,0,0,0,0,0,1},
    {0,0,0,1,4,4,4},
    {0,0,0,0,0,0,1},
    {0,0,0,1,4,4},
    {0,0,0,0,0,1},
    {0,0,0,1,4},
    {0,0,0,0,1},
    {0,0,0,1},
    {0,1,4,4},
    {0,0,1},
    {0,1,4},
    {1,4,4},
    {0,1},
    {1,4},
    {0,0,0,0,0,0,0,0,0,0,0,0},
    {1},
    {0,0,0,0,0,0,0,0,0,0,0},
    {},
    {0,0,0,0,0,0,0,0,0,0},
    {},
    {0,0,0,0,0,0,0,0,0},
    {},
    {0,0,0,0,0,0,0,0},
    {},
    {0,0,0,0,0,0,0},
    {},
    {0,0,0,0,0,0},
    {},
    {0,0,0,0,0},
    {},
    {0,0,0,0},
    {},
    {0,0,0},
    {},
    {0,0},
    {},
    {},
    {0},
    {},
    {},
    {},
    };

    std::vector<int> value_Corrections = 
    {
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    233,
    233,
    235,
    235,
    237,
    237,
    239,
    239,
    241,
    241,
    243,
    243,
    245,
    245,
    247,
    247,
    249,
    249,
    249,
    252,
    252,
    252,
    255,
    255,
    };
    //vector<vector<int>> so I can copy and paste from python.
    std::vector<std::vector<int>> value_mappings = 
    {
    {1,1,1,1},
    {2,2,2,3},
    {3,3,4,5},
    {4,4,5,7},
    {5,5,6,9},
    {6,7,8,11},
    {7,8,9,13},
    {8,9,10,15},
    {9,10,12,17},
    {10,11,13,19},
    {11,12,14,21},
    {12,13,16,23},
    {13,14,17,25},
    {14,15,18,27},
    {15,17,20,29},
    {16,18,21,31},
    {17,19,22,33},
    {18,20,24,35},
    {19,21,25,37},
    {20,22,26,39},
    {21,23,28,41},
    {22,24,29,43},
    {23,25,30,45},
    {24,27,32,47},
    {25,28,33,49},
    {26,29,34,51},
    {27,30,36,53},
    {28,31,37,55},
    {29,32,38,57},
    {30,33,40,59},
    {31,34,41,61},
    {32,35,42,63},
    {33,37,44,65},
    {34,38,45,67},
    {35,39,46,69},
    {36,40,48,71},
    {37,41,49,73},
    {38,42,50,75},
    {39,43,52,77},
    {40,44,53,79},
    {41,45,54,81},
    {42,47,56,83},
    {43,48,57,85},
    {44,49,58,87},
    {45,50,60,89},
    {46,51,61,91},
    {47,52,62,93},
    {48,53,64,95},
    {49,54,65,97},
    {50,55,66,99},
    {52,57,68,101},
    {53,58,69,103},
    {54,59,70,105},
    {55,60,72,107},
    {56,61,73,109},
    {57,62,74,111},
    {58,63,76,113},
    {59,64,77,115},
    {60,65,78,117},
    {61,67,80,119},
    {62,68,81,121},
    {63,69,82,123},
    {64,70,84,125},
    {65,71,85,127},
    {66,72,86,129},
    {67,73,88,131},
    {68,74,89,133},
    {69,75,90,135},
    {70,77,92,137},
    {71,78,93,139},
    {72,79,94,141},
    {73,80,96,143},
    {74,81,97,145},
    {75,82,98,147},
    {76,83,100,149},
    {77,84,101,151},
    {78,85,102,153},
    {79,87,104,155},
    {80,88,105,157},
    {81,89,106,159},
    {82,90,108,161},
    {83,91,109,163},
    {84,92,110,165},
    {85,93,112,167},
    {86,94,113,169},
    {87,95,114,171},
    {88,97,116,173},
    {89,98,117,175},
    {90,99,118,177},
    {91,100,120,179},
    {92,101,121,181},
    {93,102,122,183},
    {94,103,124,185},
    {95,104,125,187},
    {96,105,126,189},
    {97,107,128,191},
    {98,108,129,193},
    {99,109,130,195},
    {100,110,132,197},
    {101,111,133,199},
    {102,112,134,201},
    {103,113,136,203},
    {104,114,137,205},
    {105,115,138,207},
    {106,117,140,209},
    {107,118,141,211},
    {108,119,142,213},
    {109,120,144,215},
    {110,121,145,217},
    {111,122,146,219},
    {112,123,148,221},
    {113,124,149,223},
    {114,125,150,225},
    {115,127,152,227},
    {116,128,153,229},
    {117,129,154,231},
    {118,130,156,233},
    {119,131,157,235},
    {120,132,158,237},
    {121,133,160,239},
    {122,134,161,241},
    {123,135,162,243},
    {124,137,164,245},
    {125,138,165,247},
    {126,139,166,249},
    {127,140,168,251},
    {128,141,169,253},
    {129,142,170,255},
    {130,143,172,0},
    {131,144,173,0},
    {132,145,174,0},
    {133,147,176,0},
    {134,148,177,0},
    {135,149,178,0},
    {136,150,180,0},
    {137,151,181,0},
    {138,152,182,0},
    {139,153,184,0},
    {140,154,185,0},
    {141,155,186,0},
    {142,157,188,0},
    {143,158,189,0},
    {144,159,190,0},
    {145,160,192,0},
    {146,161,193,0},
    {147,162,194,0},
    {148,163,196,0},
    {149,164,197,0},
    {150,165,198,0},
    {152,167,200,0},
    {153,168,201,0},
    {154,169,202,0},
    {155,170,204,0},
    {156,171,205,0},
    {157,172,206,0},
    {158,173,208,0},
    {159,174,209,0},
    {160,175,210,0},
    {161,177,212,0},
    {162,178,213,0},
    {163,179,214,0},
    {164,180,216,0},
    {165,181,217,0},
    {166,182,218,0},
    {167,183,220,0},
    {168,184,221,0},
    {169,185,222,0},
    {170,187,224,0},
    {171,188,225,0},
    {172,189,226,0},
    {173,190,228,0},
    {174,191,229,0},
    {175,192,230,0},
    {176,193,232,0},
    {177,194,233,0},
    {178,195,234,0},
    {179,197,236,0},
    {180,198,237,0},
    {181,199,238,0},
    {182,200,240,0},
    {183,201,241,0},
    {184,202,242,0},
    {185,203,244,0},
    {186,204,245,0},
    {187,205,246,0},
    {188,207,248,0},
    {189,208,249,0},
    {190,209,250,0},
    {191,210,252,0},
    {192,211,253,0},
    {193,212,254,0},
    {194,213,0,0},
    {195,214,0,0},
    {196,215,0,0},
    {197,217,0,0},
    {198,218,0,0},
    {199,219,0,0},
    {200,220,0,0},
    {201,221,0,0},
    {202,222,0,0},
    {203,223,0,0},
    {204,224,0,0},
    {205,225,0,0},
    {206,227,0,0},
    {207,228,0,0},
    {208,229,0,0},
    {209,230,0,0},
    {210,231,0,0},
    {211,232,0,0},
    {212,233,0,0},
    {213,234,0,0},
    {214,235,0,0},
    {215,237,0,0},
    {216,238,0,0},
    {217,239,0,0},
    {218,240,0,0},
    {219,241,0,0},
    {220,242,0,0},
    {221,243,0,0},
    {222,244,0,0},
    {223,245,0,0},
    {224,247,0,0},
    {225,248,0,0},
    {226,249,0,0},
    {227,250,0,0},
    {228,251,0,0},
    {229,252,0,0},
    {230,253,0,0},
    {231,254,0,0},
    {232,255,0,0},
    {233,0,0,0},
    {234,0,0,0},
    {235,0,0,0},
    {236,0,0,0},
    {237,0,0,0},
    {238,0,0,0},
    {239,0,0,0},
    {240,0,0,0},
    {241,0,0,0},
    {242,0,0,0},
    {243,0,0,0},
    {244,0,0,0},
    {245,0,0,0},
    {246,0,0,0},
    {247,0,0,0},
    {248,0,0,0},
    {249,0,0,0},
    {250,0,0,0},
    {252,0,0,0},
    {253,0,0,0},
    {254,0,0,0},
    {255,0,0,0},
    {0,0,0,0},
    {0,0,0,0},
    {0,0,0,0},
    };

    std::cout << value_mappings.size() << std::endl;
    std::cout << operations.size() << std::endl;
    std::cout << value_Corrections.size() << std::endl;


    int r = 88;
    int g = 20;
    int b = 2;
    int plchld = r;
    int hi;
    int mid;
    int lo;
    int hi_val;
    int cur_mid;
    int cur_lo;

    //hard coded for speed.
    //1 red. 2 green. 3 blue
    //whicheever is mid is the color used for part 2.
    //if 1 low, use cyan, if 2 low, use magenta, if 3 low, use yellow.
    hi = 1;
    if(g > r)
    {
        hi = 2;
        if(b > g)
        {
            hi = 3;
            hi_val = b;
            mid = 2;
            cur_mid = g;
            lo = 1;
            cur_lo = r;
        }
        else
        {
             if(r > b)
            {
                mid = 1;
                cur_mid = r;
                lo = 3;
                cur_lo = b;
                hi_val = g;
            }
            else
            {
                mid = 3;
                cur_mid = b;
                lo = 1;
                cur_lo = r;
                hi_val = g;
            }
        }
    }
    else if(b >r)
    {
        hi = 3;
        hi_val = b;
        mid = 1;
        cur_mid = r;
        lo = 2;
        cur_lo = g;
    }
    else
    {
        if(g > b)
        {
            mid = 2;
            cur_mid = g;
            lo = 3;
            cur_lo = b;
            hi_val = r;
        }
        else
        {
            mid = 3;
            cur_mid = b;
            lo = 2;
            cur_lo = g;
            hi_val = r;
        }
    }

    std::cout << "hi: " << hi << std::endl;
    std::cout << "mid: " << mid << std::endl;
    std::cout << "lo: " << lo << std::endl;

    hi_val = value_Corrections[hi_val-1];
    
    //Add to the black the respective alpha commands.
    int cmd = operations[hi_val-1].size()-1;
    while(cmd >=0)
    {
        if(operations[hi_val-1][cmd]==4)
        {
            cur_lo = value_mappings[cur_lo-1][0];
            cur_mid = value_mappings[cur_mid-1][0];
        }
        else
        {
            cur_lo = value_mappings[cur_lo-1][operations[hi_val-1][cmd]];
            cur_mid = value_mappings[cur_mid-1][operations[hi_val-1][cmd]];
        }        
        std::cout << "cur_low: " << cur_lo << std::endl;
        std::cout << "cur_mid: " << cur_mid << std::endl;
        cmd--;
    }

    //map value of mid to correct color
    //Iterate through that list and add the appropriate alpha commands for that color.
    //how do i even do that(the mapping part)? I can obvious have... duh just a switch statement and I call the function in each one but pass a color vector to it.
    //I will use 8 vectors, 7 of them will contain 5 smaller vectors consiting of the commands. (white doesnt need alpha and is only for starting point.)
       
    cur_mid = value_Corrections[cur_mid-1];
    cmd = operations[cur_mid-1].size()-1;
    while(cmd >=0)
    {
        if(operations[cur_mid-1][cmd]==4)
        {
            cur_lo = value_mappings[cur_lo-1][0];
        }
        else
        {
            cur_lo = value_mappings[cur_lo-1][operations[cur_mid-1][cmd]];
        }        
        std::cout << "cur_low2: " << cur_lo << std::endl;
        cmd--;
    }
    //std::cout << std::endl;

    switch(mid)
    {
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
    }

    switch(lo)
    {
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
    }
    /*
    okay lets think about how this may go. We get our first color, we organize into
    highest value, middle, lowest. The highest value we do nothing with, just
    append the commands to the color's alpha todo list.

    The highest color operation will always be done in black, the lowest done
    in the respective yellow, mag, cyan (based on r,g,b,), and the middle will
    always be done in either red, green, blue, depending on its column. When we find
    out which column is the highest, we append to the respective black alpha vectors
    the coordinates of the pixel with a click amount. Afterwords we set up set up
    2 vars, cur lowest and cur middle. We iterate through the commands, and apply
    the value mapping to each of the numbers recursively. Then, with the middle number,
    we run the correction mapping, append those value commands to the needed todo vectors,
    and run those value mappings on the lowest number now. Now we finally add those value commands
    and then move on to the next pixel.

    In the case of alpha, we will have 100 alpha vectors for stamps or the 5 for blocks.
    */


   /*How is the actions todolist structured?
   The order is as follows: white, cyan, yellow, magenta, red, blue, green, black.

   Each one will have a list of actions for the 5 alphas, .01, .1, .25, .5, and the
   returning .01. Thats a total of 40 lists of actions, all done sequentially.

   Between each list of actions a few prep changes will be made like changing color or
   changing alpha.

   We simply iterate through the list, which contains a set of coordinates. We will
   change the INPUT var to reflect those coordinates and then send input to click.
   */
    return 0;
}
